import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))  # —Ç–≤–æ–π Telegram ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "subscribers.json"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
def load_subscribers():
    if not os.path.exists(DATA_FILE):
        return []
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_subscribers(subs):
    with open(DATA_FILE, "w") as f:
        json.dump(subs, f)

def add_subscriber(chat_id):
    subs = load_subscribers()
    if chat_id not in subs:
        subs.append(chat_id)
        save_subscribers(subs)

# --- –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç ---
@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
async def on_new_member(message: types.Message):
    if message.new_chat_members:
        for member in message.new_chat_members:
            if member.id == (await bot.me).id:
                add_subscriber(message.chat.id)
                await message.reply("‚úÖ –ë–æ—Ç –¥–æ–¥–∞–Ω–∏–π —É —á–∞—Ç —ñ —Ç–µ–ø–µ—Ä –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è!")

# --- /start –≤ –ª–∏—á–∫–µ ---
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    add_subscriber(message.chat.id)
    await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è!")

# --- /send –∫–æ–º–∞–Ω–¥–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü) ---
@dp.message_handler(commands=["send"], content_types=types.ContentTypes.ANY)
async def send_broadcast(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return await message.reply("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    subscribers = load_subscribers()
    if not subscribers:
        return await message.reply("‚ö†Ô∏è –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞.")

    sent = 0
    failed = 0

    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç)
    if message.photo:
        file_id = message.photo[-1].file_id
        caption = message.caption or ""
        for cid in subscribers:
            try:
                await bot.send_photo(cid, file_id, caption=caption)
                sent += 1
            except Exception:
                failed += 1

    elif message.video:
        file_id = message.video.file_id
        caption = message.caption or ""
        for cid in subscribers:
            try:
                await bot.send_video(cid, file_id, caption=caption)
                sent += 1
            except Exception:
                failed += 1

    elif message.document:
        file_id = message.document.file_id
        caption = message.caption or ""
        for cid in subscribers:
            try:
                await bot.send_document(cid, file_id, caption=caption)
                sent += 1
            except Exception:
                failed += 1

    else:
        # –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = message.text.replace("/send", "").strip()
        if not text:
            return await message.reply("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/send –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è`", parse_mode="Markdown")

        for cid in subscribers:
            try:
                await bot.send_message(cid, text)
                sent += 1
            except Exception:
                failed += 1

    await message.reply(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {sent}, ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: {failed}")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
