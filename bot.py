import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))  # —Ç–≤–æ–π Telegram ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "subscribers.json"


# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ---
def load_subscribers():
    if not os.path.exists(DATA_FILE):
        return []
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_subscribers(subs):
    with open(DATA_FILE, "w") as f:
        json.dump(subs, f)

def add_subscriber(chat_id):
    subs = load_subscribers()
    if chat_id not in subs:
        subs.append(chat_id)
        save_subscribers(subs)


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ /start –∏–ª–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ ---
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    add_subscriber(message.chat.id)
    await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è!")

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def on_text(message: types.Message):
    # –ï—Å–ª–∏ –±–æ—Ç –≤ —á–∞—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Ç–∞–º)
    if message.chat.type in ["group", "supergroup"]:
        add_subscriber(message.chat.id)


# --- –ï—Å–ª–∏ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ ---
@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
async def on_new_member(message: types.Message):
    for member in message.new_chat_members:
        if member.id == (await bot.me).id:
            add_subscriber(message.chat.id)
            await message.reply("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π —É —Ü—å–æ–º—É —á–∞—Ç—ñ!")


# --- /send –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ---
@dp.message_handler(commands=["send"], content_types=types.ContentTypes.ANY)
async def send_broadcast(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return await message.reply("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    subs = load_subscribers()
    if not subs:
        return await message.reply("‚ö†Ô∏è –ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")

    sent = 0
    failed = 0

    # –ú–µ–¥–∏–∞-—Ä–∞—Å—Å—ã–ª–∫–∞
    if message.photo:
        file_id = message.photo[-1].file_id
        caption = message.caption or ""
        for cid in subs:
            try:
                await bot.send_photo(cid, file_id, caption=caption)
                sent += 1
            except Exception:
                failed += 1

    elif message.video:
        file_id = message.video.file_id
        caption = message.caption or ""
        for cid in subs:
            try:
                await bot.send_video(cid, file_id, caption=caption)
                sent += 1
            except Exception:
                failed += 1

    elif message.document:
        file_id = message.document.file_id
        caption = message.caption or ""
        for cid in subs:
            try:
                await bot.send_document(cid, file_id, caption=caption)
                sent += 1
            except Exception:
                failed += 1

    else:
        text = message.text.replace("/send", "").strip()
        if not text:
            return await message.reply("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/send –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è`", parse_mode="Markdown")
        for cid in subs:
            try:
                await bot.send_message(cid, text)
                sent += 1
            except Exception:
                failed += 1

    await message.reply(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {sent}, ‚ùå –ü–æ–º–∏–ª–∫–∞: {failed}")


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
